#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Функция для генерации случайной матрицы смежности
void genM(int **matrix, int n) {
    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        for (int j = i; j < n; j++) {
            if (i == j) {
                matrix[i][j] = 0; // Нет петель
            } else {
                int edge = rand() % 2; // Случайное ребро (0 или 1)
                matrix[i][j] = edge;
                matrix[j][i] = edge; // Симметричное значение для неориентированного графа
            }
        }
    }
}

// Функция для вывода матрицы смежности
void printM(int **matrix, int n) {
    printf("Матрица смежности:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

// Обход матрицы
void DFS(int **matrix, int *vis, int node, int n) {
    vis[node] = 1;
    printf("%d ", node);

    for (int i = 0; i < n; i++) {
        if (matrix[node][i] == 1 && !vis[i]) {
            DFS(matrix, vis, i, n);
        }
    }
}

int main() {
    int n, start_node;

    printf("Введите размер матрицы: ");
    scanf("%d", &n);

    // Динамическое выделение памяти для матрицы смежности и массива посещений
    int **matrix = (int **)malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++) {
        matrix[i] = (int *)malloc(n * sizeof(int));
    }
    int *vis = (int *)calloc(n, sizeof(int));

    genM(matrix, n);
    printM(matrix, n);

    printf("Введите начальную вершину для обхода (от 0 до %d): ", n - 1);
    scanf("%d", &start_node);

    printf("Обход в глубину (DFS) начиная с вершины %d:\n", start_node);
    DFS(matrix, vis, start_node, n); // Начало обхода с заданной вершины

    // Освобождение выделенной памяти
    for (int i = 0; i < n; i++) {
        free(matrix[i]);
    }
    free(matrix);
    free(vis);

    return 0;
}
